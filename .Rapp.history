q()
5 %% 2
2 %% 5
5 %% 2
q()
R.version
q()
system.time(for (i in 1:1000000) {i + i})
system.time(for (i in 1:10000000) {i + i})
system.time(for (i in 1:10000) {matrix(runif(100), ncol = 2)^2})
system.time(for (i in 1:100000) {matrix(runif(100), ncol = 2)^2})
lista <- list.files("results cluster output/", full.names = TRUE)
lista
setwd('/Users/bvilela/Box Sync/Bruno/WUSTL projects/Simulations_humans')
lista <- list.files("results cluster output/", full.names = TRUE)
lista
spatial_div <- function(x) {
spatial_div <- function(x) {
spatial_div <- function(x) {#
  a <- x[[1]]#
  spatial.for <- a$estimate[1] / a$estimate[2]#
  b <- x[[2]]#
  spatial.dom <- b$estimate[1] / b$estimate[2]#
  return(setNames(c(spatial.for, spatial.dom), NULL))#
}
n.groups <- length(lista)#
replication <- numeric(n.groups)#
#
data.analysis.comp <- NULL
for (i in 1:n.groups) { #
  load(lista[[i]]) # Name returns#
  replication[i] <- length(returns[[8]])#
  # Analysis data table#
  names.vars <- names(returns)#
  pos.list <- c(10:12, 14:16, 18:21, 24, 28)#
  names.vars.in <- names.vars[pos.list]#
  n.names <- length(names.vars.in)#
  names.added <- c("Model", "spatial.for", "spatial.dom",#
                   "birth", "death", "death.bird.div",#
                   "death.bird.sub", rownames(returns[[27]]))#
  n.added <- length(names.added)#
  total.cols <- n.added + n.names#
  data.analysis <- matrix(ncol = total.cols, nrow = replication[i])#
  colnames(data.analysis) <- c(names.added,#
                               names.vars.in)#
  # Model#
  data.analysis[, 1] <- rep(as.numeric(strsplit(lista[[i]], "_")[[1]][5]), replication[i])#
  # Spatial data = expected/observed#
  spatial.data <- returns[[8]]#
  data.analysis[, 2:3] <- t(sapply(spatial.data, spatial_div))#
  # Macroevolutionary#
  data.analysis[, 4:7] <- t(returns[[26]])#
  data.analysis[, 8:13] <- t(returns[[27]])#
  # General variables#
  data.analysis[, (n.added + 1):total.cols] <- do.call(cbind, returns[pos.list])#
  data.analysis.comp <- rbind(data.analysis.comp, data.analysis)#
}
head(data.analysis.comp)
library(randomForest)#
fit <- randomForest(as.factor(Model) ~ .,#
                    data=data.analysis.comp, #
                    importance=TRUE, #
                    ntree=2000)
varImpPlot(fit)
summary(fit)
fit
plot(fit)
install.packages('rpart')
library(rpart)
fit <- rpart(as.factor(Model) ~ .,#
                    data=data.analysis.comp, #
                    method = "class")
fit <- rpart(as.factor(Model) ~ .,#
                    data=as.data.frame(data.analysis.comp), #
                    method = "class")
fit
printcp(fit)
plotcp(fit)
plotcp(fit)
summary(fit)
plot(fit)
plot(fit, uniform=TRUE, #
   main="Classification Tree for Kyphosis")#
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fit <- randomForest(as.factor(Model) ~ .,#
                    data=data.analysis.comp, #
                    importance=TRUE, #
                    ntree=2000)
varImpPlot(fit)
varImpPlot(fit)
importance(fit)
fit
plot(fit)
library(rpart)#
fit <- rpart(as.factor(Model) ~ .,#
                    data=as.data.frame(data.analysis.comp), #
                    method = "class")#
printcp(fit)#
plotcp(fit)#
summary(fit) #
plot(fit, uniform=TRUE, #
   main="Classification Tree for Kyphosis")#
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, #
   main="Classification Tree")#
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# Random forests#
library(randomForest)#
fit <- randomForest(as.factor(Model) ~ .,#
                    data=data.analysis.comp, #
                    importance=TRUE, #
                    ntree=2000)
fit
summary(fit)
fit$ntree
? randomForest
MDSplot(fit)
? randomForest
tree <- getTree(fit)
tree
plot(margin(fit))
plot(margin(fit))
plot(margin(fit))
MDSplot(fit, data.analysis.comp$Model)
fit <- randomForest(as.factor(Model) ~ .,#
                    data=data.analysis.comp, #
                    importance=TRUE, #
                    ntree=2000, proximity=TRUE)
MDSplot(fit, data.analysis.comp$Model)
data.analysis.comp$Model
MDSplot(fit,a as.factor(data.analysis.comp[, 1]))
MDSplot(fit, as.factor(data.analysis.comp[, 1]))
MDSplot(fit, as.factor(data.analysis.comp[, 1]))
par(mar = c(5, 5, 5, 5))
MDSplot(fit, as.factor(data.analysis.comp[, 1]))
par(mar = c(5, 5, 2, 2))#
MDSplot(fit, as.factor(data.analysis.comp[, 1]))
install.packages('PARTY')
install.packages('party')
library('party')
fit <- cforest(as.factor(Model) ~ .,#
                    data=data.analysis.comp)
fit <- cforest(as.factor(Model) ~ .,#
                    data=as.data.frame(data.analysis.comp))
plot(fit)
fit
cf <- fit
pt <- party:::prettytree(cf@ensemble[[1]], names(cf@data@get("input"))) #
pt #
nt <- new("BinaryTree") #
nt@tree <- pt #
nt@data <- cf@data #
nt@responses <- cf@responses #
nt #
plot(nt)
plot(cf, type="simple")
fit <- rpart(as.factor(Model) ~ .,#
                    data=as.data.frame(data.analysis.comp), #
                    method = "class")
fit
library('party')
summary(fit)
printcp(fit)
plotcp(fit)
plot(fit, uniform=TRUE,
plot(fit, uniform=TRUE,
plot(fit, uniform=TRUE, #
   main="Classification Tree")#
text(fit, use.n=TRUE, all=TRUE, cex=.8)
tree
cor(data.analysis.comp)
summary(cor(data.analysis.comp))
summary(diag(cor(data.analysis.comp)) <- NA)
summary(diag(cor(data.analysis.comp)))
summary(lower.tri(cor(data.analysis.comp)))
summary(cor(data.analysis.comp))
q()
